{% package templates %}

{% import (
    "bytes"
    "strings"
    "github.com/go-echarts/go-echarts/v2/charts"
    "github.com/goptics/vizb/shared"
) %}

{% func BenchmarkChart(BenchCharts []shared.BenchCharts) %}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{%s shared.FlagState.Name %}</title>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js"></script>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/themes/light.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            width: 100%;
            font-family: Arial, sans-serif;
            scroll-padding-top: 20px;
        }

        .chart {
            margin: 20px auto;
            width: 98%;
            height: 500px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-width: 1080px;
            scroll-margin-top: 20px;
        }

        .chart ~ .chart {
            margin-top: 50px;
        }

        .container {
            margin: 0 auto;
            width: 100%;
        }
        
        h1 {
            text-align: center;
            font-family: Arial, sans-serif;
            margin: 20px 0;
        }
        
        /* Sidebar styles */
        .sidebar {
            position: fixed;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            background-color: rgba(255, 255, 255, 0.9);
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            max-height: 80vh;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 5px;
            cursor: move;
            user-select: none;
        }
        
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            cursor: move;
        }
        
        .sidebar-title {
            font-weight: bold;
            text-align: center;
            font-size: 14px;
            flex-grow: 1;
        }
        
        .minimize-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            padding: 0 5px;
            color: #666;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .minimize-btn:hover {
            color: #333;
        }
        
        .sidebar.minimized {
            width: auto;
            padding: 5px;
        }
        
        .sidebar.minimized .bench-indicator,
        .sidebar.minimized .sidebar-title {
            display: none;
        }
        
        .sidebar.minimized .minimize-btn {
            transform: rotate(180deg);
            font-size: 14px;
            padding: 3px;
            margin: 0;
        }
        
        .sidebar.minimized .sidebar-header {
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bench-indicator {
            padding: 5px 10px;
            border-radius: 4px;
            background-color: #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s;
            font-size: 12px;
            text-align: center;
        }
        
        .bench-indicator:hover {
            background-color: #e0e0e0;
        }
        
        .bench-indicator.active {
            background-color: #4CAF50;
            color: white;
        }
    </style>
    <script type="text/javascript">
        // Add resize event handler to make charts responsive
        window.addEventListener('resize', function() {
            // Resize all charts when window size changes
            const charts = document.querySelectorAll('.item');
            charts.forEach(function(chart) {
                const instance = echarts.getInstanceByDom(chart);
                if (instance) {
                    instance.resize();
                }
            });
        });
        
        // Initialize sidebar functionality when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.getElementById('bench-sidebar');
            const indicators = document.querySelectorAll('.bench-indicator');
            const chartSections = document.querySelectorAll('.chart-section');
            const minimizeBtn = document.getElementById('minimize-btn');
            
            // Make sidebar draggable
            let isDragging = false;
            let offsetX, offsetY;
            
            function startDrag(e) {
                // Only start drag if it's the sidebar header or the sidebar itself when minimized
                if (e.target.closest('.sidebar-header') || 
                    (sidebar.classList.contains('minimized') && e.target.closest('.sidebar'))) {
                    isDragging = true;
                    
                    // Get the current position of the sidebar
                    const sidebarRect = sidebar.getBoundingClientRect();
                    
                    // Calculate the offset from the mouse position to the sidebar position
                    offsetX = e.clientX - sidebarRect.left;
                    offsetY = e.clientY - sidebarRect.top;
                    
                    // Prevent text selection during drag
                    e.preventDefault();
                }
            }
            
            function drag(e) {
                if (isDragging) {
                    // Calculate new position
                    const x = e.clientX - offsetX;
                    const y = e.clientY - offsetY;
                    
                    // Apply new position
                    sidebar.style.left = x + 'px';
                    sidebar.style.top = y + 'px';
                    sidebar.style.right = 'auto';
                    sidebar.style.transform = 'none';
                }
            }
            
            function stopDrag() {
                isDragging = false;
            }
            
            // Add event listeners for dragging
            sidebar.addEventListener('mousedown', startDrag);
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDrag);
            
            // Minimize/maximize sidebar
            minimizeBtn.addEventListener('click', function() {
                sidebar.classList.toggle('minimized');
                this.textContent = sidebar.classList.contains('minimized') ? '◀' : '▶';
            });
            
            // Add click event to each indicator
            indicators.forEach(function(indicator) {
                indicator.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);
                    
                    if (targetElement) {
                        // Scroll to the target element
                        targetElement.scrollIntoView({ behavior: 'smooth' });
                        
                        // Update active state
                        indicators.forEach(ind => ind.classList.remove('active'));
                        this.classList.add('active');
                    }
                });
            });
            
            // Update active indicator on scroll
            window.addEventListener('scroll', function() {
                let currentSection = '';
                
                chartSections.forEach(function(section) {
                    const sectionTop = section.offsetTop;
                    const sectionHeight = section.clientHeight;
                    
                    if (pageYOffset >= (sectionTop - 100)) {
                        currentSection = section.getAttribute('id');
                    }
                });
                
                indicators.forEach(function(indicator) {
                    indicator.classList.remove('active');
                    if (indicator.getAttribute('data-target') === currentSection) {
                        indicator.classList.add('active');
                    }
                });
            });
        });
    </script>
</head>
<body>
    <h1>{%s shared.FlagState.Name %} (CPU: {%d shared.CPUCount %})</h1>
    {% if shared.FlagState.Description != "" %}
    <p style="text-align: center; margin-bottom: 20px;">{%s shared.FlagState.Description %}</p>
    {% endif %}

    {% code
        // Check if any benchmark has a non-empty name
        hasNamedBenchmarks := false
        for _, taskChart := range BenchCharts {
            if taskChart.Name != "" {
                hasNamedBenchmarks = true
                break
            }
        }
    %}
    
    {% if hasNamedBenchmarks %}
    <!-- Sidebar for benchmark navigation -->
    <div id="bench-sidebar" class="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-title">Bench Indicators</div>
            <button id="minimize-btn" class="minimize-btn">▶</button>
        </div>
        {% for i, taskChart := range BenchCharts %}
        {% if taskChart.Name != "" %}
        <div class="bench-indicator{% if i == 0 %} active{% endif %}" data-target="bench-section-{%d i %}">
            {%s taskChart.Name %}
        </div>
        {% endif %}
        {% endfor %}
    </div>
    {% endif %}
    
    {% for i, taskChart := range BenchCharts %}
    <div id="bench-section-{%d i %}" class="chart-section">
        <div class='chart'>
            {%s= renderChart(taskChart.NsPerOpChart) %}
        </div>
        {% if shared.HasMemStats %}
        <div class='chart'>
            {%s= renderChart(taskChart.BytesPerOpChart) %}
        </div>
        {% endif %}
        {% if shared.HasMemStats %}
        <div class='chart'>
            {%s= renderChart(taskChart.AllocsPerOpChart) %}
        </div>
        {% endif %}
    </div>
    {% endfor %}

    {% if !shared.HasMemStats %}
    <div style="text-align: center; margin: 20px; color: #666;">
        <p>Note: Memory statistics are not available. Run benchmarks with <code>-benchmem</code> flag to include memory metrics.</p>
    </div>
    {% endif %}
    <footer style="text-align: center; margin-top: 30px; margin-bottom: 20px; font-size: 14px; color: #666;">
        Generated by <a alt="Vizb" target="_blank" href="https://github.com/goptics/vizb" style="color: #666; text-decoration: none; font-weight: bold;">Vizb</a> | Made with <span style="color: #e25555;">❤</span> by <a alt="Goptics" target="_blank" href="https://github.com/goptics" style="color: #666; text-decoration: none; font-weight: bold;">Goptics</a> &copy; 2025
    </footer>
</body>
</html>
{% endfunc %}

{% func renderChart(chart *charts.Bar) %}
    {% code
        var buf bytes.Buffer
        chart.Render(&buf)
        content := buf.String()
        
        // Extract just the chart div and script content
        divStart := strings.Index(content, "<div class=\"container\">")
        scriptEnd := strings.LastIndex(content, "</script>")
        
        var chartContent string
        if divStart >= 0 && scriptEnd >= 0 {
            // Find the div item with fixed width and height
            divItemStart := strings.Index(content, "<div class=\"item\"")
            divItemEnd := strings.Index(content[divItemStart:], ">") + divItemStart
            
            if divItemStart >= 0 && divItemEnd > divItemStart {
                // Replace the fixed width and height with responsive values
                beforeDivItem := content[divStart:divItemStart]
                afterDivItem := content[divItemEnd+1 : scriptEnd+9] // +9 to include </script>
                
                // Create responsive div
                chartId := strings.Split(strings.Split(content[divItemStart:divItemEnd], "id=\"")[1], "\"")[0]
                responsiveDiv := "<div class=\"item\" id=\"" + chartId + "\" style=\"width:100%;height:500px;\">"
                
                chartContent = beforeDivItem + responsiveDiv + afterDivItem
            } else {
                // Fallback to original extraction if we can't find the item div
                chartContent = content[divStart : scriptEnd+9]
            }
        }
    %}
    {%s= chartContent %}
{% endfunc %}
