{% package templates %}

{% import (
    "bytes"
    "strings"
    "github.com/go-echarts/go-echarts/v2/charts"
    "github.com/goptics/vizb/shared"
) %}

{% func BenchmarkChart(BenchCharts []shared.BenchCharts) %}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{%s shared.FlagState.Name %}</title>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js"></script>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/themes/light.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            width: 100%;
            font-family: Arial, sans-serif;
        }

        .chart {
            margin: 20px auto;
            width: 98%;
            height: 500px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-width: 1080px;
        }

        .chart ~ .chart {
            margin-top: 50px;
        }

        .container {
            margin: 0 auto;
            width: 100%;
        }
        
        h1 {
            text-align: center;
            font-family: Arial, sans-serif;
            margin: 20px 0;
        }
    </style>
    <script type="text/javascript">
        // Add resize event handler to make charts responsive
        window.addEventListener('resize', function() {
            // Resize all charts when window size changes
            const charts = document.querySelectorAll('.item');
            charts.forEach(function(chart) {
                const instance = echarts.getInstanceByDom(chart);
                if (instance) {
                    instance.resize();
                }
            });
        });
    </script>
</head>
<body>
    <h1>{%s shared.FlagState.Name %} (CPU: {%d shared.CPUCount %})</h1>
    {% if shared.FlagState.Description != "" %}
    <p style="text-align: center; margin-bottom: 20px;">{%s shared.FlagState.Description %}</p>
    {% endif %}

    {% for _, taskChart := range BenchCharts %}
    <div class='chart'>
        {%s= renderChart(taskChart.NsPerOpChart) %}
    </div>
    {% if shared.HasMemStats %}
    <div class='chart'>
        {%s= renderChart(taskChart.BytesPerOpChart) %}
    </div>
    {% endif %}
    {% if shared.HasMemStats %}
    <div class='chart'>
        {%s= renderChart(taskChart.AllocsPerOpChart) %}
    </div>
    {% endif %}
    {% endfor %}

    {% if !shared.HasMemStats %}
    <div style="text-align: center; margin: 20px; color: #666;">
        <p>Note: Memory statistics are not available. Run benchmarks with <code>-benchmem</code> flag to include memory metrics.</p>
    </div>
    {% endif %}
    <footer style="text-align: center; margin-top: 30px; margin-bottom: 20px; font-size: 14px; color: #666;">
        Made with <span style="color: #e25555;">‚ù§</span> - <a alt="Goptics" target="_blank" href="https://github.com/goptics" style="color: #666; text-decoration: none; font-weight: bold;">Goptics</a> &copy; 2025
    </footer>
</body>
</html>
{% endfunc %}

{% func renderChart(chart *charts.Bar) %}
    {% code
        var buf bytes.Buffer
        chart.Render(&buf)
        content := buf.String()
        
        // Extract just the chart div and script content
        divStart := strings.Index(content, "<div class=\"container\">")
        scriptEnd := strings.LastIndex(content, "</script>")
        
        var chartContent string
        if divStart >= 0 && scriptEnd >= 0 {
            // Find the div item with fixed width and height
            divItemStart := strings.Index(content, "<div class=\"item\"")
            divItemEnd := strings.Index(content[divItemStart:], ">") + divItemStart
            
            if divItemStart >= 0 && divItemEnd > divItemStart {
                // Replace the fixed width and height with responsive values
                beforeDivItem := content[divStart:divItemStart]
                afterDivItem := content[divItemEnd+1 : scriptEnd+9] // +9 to include </script>
                
                // Create responsive div
                chartId := strings.Split(strings.Split(content[divItemStart:divItemEnd], "id=\"")[1], "\"")[0]
                responsiveDiv := "<div class=\"item\" id=\"" + chartId + "\" style=\"width:100%;height:500px;\">"
                
                chartContent = beforeDivItem + responsiveDiv + afterDivItem
            } else {
                // Fallback to original extraction if we can't find the item div
                chartContent = content[divStart : scriptEnd+9]
            }
        }
    %}
    {%s= chartContent %}
{% endfunc %}
