// Code generated by qtc from "chart.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line pkg/templates/chart.qtpl:1
package templates

//line pkg/templates/chart.qtpl:3
import (
	"bytes"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/goptics/vizb/shared"
	"strings"
)

//line pkg/templates/chart.qtpl:10
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line pkg/templates/chart.qtpl:10
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line pkg/templates/chart.qtpl:10
func StreamBenchmarkChart(qw422016 *qt422016.Writer, nsPerOpChart, bytesPerOpChart, allocsPerOpChart *charts.Bar) {
//line pkg/templates/chart.qtpl:10
	qw422016.N().S(`
`)
//line pkg/templates/chart.qtpl:12
	// Check if the memory charts exist
	hasMemoryData := bytesPerOpChart != nil
	hasAllocData := allocsPerOpChart != nil

//line pkg/templates/chart.qtpl:15
	qw422016.N().S(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>`)
//line pkg/templates/chart.qtpl:20
	qw422016.E().S(shared.FlagState.Name)
//line pkg/templates/chart.qtpl:20
	qw422016.N().S(`</title>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js"></script>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/themes/light.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            width: 100%;
            font-family: Arial, sans-serif;
        }

        .chart {
            margin: 20px auto;
            width: 98%;
            height: 500px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-width: 1080px;
        }

        .chart ~ .chart {
            margin-top: 50px;
        }

        .container {
            margin: 0 auto;
            width: 100%;
        }
        
        h1 {
            text-align: center;
            font-family: Arial, sans-serif;
            margin: 20px 0;
        }
    </style>
    <script type="text/javascript">
        // Add resize event handler to make charts responsive
        window.addEventListener('resize', function() {
            // Resize all charts when window size changes
            const charts = document.querySelectorAll('.item');
            charts.forEach(function(chart) {
                const instance = echarts.getInstanceByDom(chart);
                if (instance) {
                    instance.resize();
                }
            });
        });
    </script>
</head>
<body>
    <h1>`)
//line pkg/templates/chart.qtpl:77
	qw422016.E().S(shared.FlagState.Name)
//line pkg/templates/chart.qtpl:77
	qw422016.N().S(`</h1>
    `)
//line pkg/templates/chart.qtpl:78
	if shared.FlagState.Description != "" {
//line pkg/templates/chart.qtpl:78
		qw422016.N().S(`
    <p style="text-align: center; margin-bottom: 20px;">`)
//line pkg/templates/chart.qtpl:79
		qw422016.E().S(shared.FlagState.Description)
//line pkg/templates/chart.qtpl:79
		qw422016.N().S(`</p>
    `)
//line pkg/templates/chart.qtpl:80
	}
//line pkg/templates/chart.qtpl:80
	qw422016.N().S(`
    <div class='chart'>
        `)
//line pkg/templates/chart.qtpl:82
	qw422016.N().S(renderChart(nsPerOpChart))
//line pkg/templates/chart.qtpl:82
	qw422016.N().S(`
    </div>
    `)
//line pkg/templates/chart.qtpl:84
	if hasMemoryData {
//line pkg/templates/chart.qtpl:84
		qw422016.N().S(`
    <div class='chart'>
        `)
//line pkg/templates/chart.qtpl:86
		qw422016.N().S(renderChart(bytesPerOpChart))
//line pkg/templates/chart.qtpl:86
		qw422016.N().S(`
    </div>
    `)
//line pkg/templates/chart.qtpl:88
	}
//line pkg/templates/chart.qtpl:88
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:89
	if hasAllocData {
//line pkg/templates/chart.qtpl:89
		qw422016.N().S(`
    <div class='chart'>
        `)
//line pkg/templates/chart.qtpl:91
		qw422016.N().S(renderChart(allocsPerOpChart))
//line pkg/templates/chart.qtpl:91
		qw422016.N().S(`
    </div>
    `)
//line pkg/templates/chart.qtpl:93
	}
//line pkg/templates/chart.qtpl:93
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:94
	if !hasMemoryData {
//line pkg/templates/chart.qtpl:94
		qw422016.N().S(`
    <div style="text-align: center; margin: 20px; color: #666;">
        <p>Note: Memory statistics are not available. Run benchmarks with <code>-benchmem</code> flag to include memory metrics.</p>
    </div>
    `)
//line pkg/templates/chart.qtpl:98
	}
//line pkg/templates/chart.qtpl:98
	qw422016.N().S(`
    <footer style="text-align: center; margin-top: 30px; margin-bottom: 20px; font-size: 14px; color: #666;">
        Made with <span style="color: #e25555;">‚ù§</span> - <a alt="Goptics" target="_blank" href="https://github.com/goptics" style="color: #666; text-decoration: none; font-weight: bold;">Goptics</a> &copy; 2025
    </footer>
</body>
</html>
`)
//line pkg/templates/chart.qtpl:104
}

//line pkg/templates/chart.qtpl:104
func WriteBenchmarkChart(qq422016 qtio422016.Writer, nsPerOpChart, bytesPerOpChart, allocsPerOpChart *charts.Bar) {
//line pkg/templates/chart.qtpl:104
	qw422016 := qt422016.AcquireWriter(qq422016)
//line pkg/templates/chart.qtpl:104
	StreamBenchmarkChart(qw422016, nsPerOpChart, bytesPerOpChart, allocsPerOpChart)
//line pkg/templates/chart.qtpl:104
	qt422016.ReleaseWriter(qw422016)
//line pkg/templates/chart.qtpl:104
}

//line pkg/templates/chart.qtpl:104
func BenchmarkChart(nsPerOpChart, bytesPerOpChart, allocsPerOpChart *charts.Bar) string {
//line pkg/templates/chart.qtpl:104
	qb422016 := qt422016.AcquireByteBuffer()
//line pkg/templates/chart.qtpl:104
	WriteBenchmarkChart(qb422016, nsPerOpChart, bytesPerOpChart, allocsPerOpChart)
//line pkg/templates/chart.qtpl:104
	qs422016 := string(qb422016.B)
//line pkg/templates/chart.qtpl:104
	qt422016.ReleaseByteBuffer(qb422016)
//line pkg/templates/chart.qtpl:104
	return qs422016
//line pkg/templates/chart.qtpl:104
}

//line pkg/templates/chart.qtpl:106
func streamrenderChart(qw422016 *qt422016.Writer, chart *charts.Bar) {
//line pkg/templates/chart.qtpl:106
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:108
	var buf bytes.Buffer
	chart.Render(&buf)
	content := buf.String()

	// Extract just the chart div and script content
	divStart := strings.Index(content, "<div class=\"container\">")
	scriptEnd := strings.LastIndex(content, "</script>")

	var chartContent string
	if divStart >= 0 && scriptEnd >= 0 {
		// Find the div item with fixed width and height
		divItemStart := strings.Index(content, "<div class=\"item\"")
		divItemEnd := strings.Index(content[divItemStart:], ">") + divItemStart

		if divItemStart >= 0 && divItemEnd > divItemStart {
			// Replace the fixed width and height with responsive values
			beforeDivItem := content[divStart:divItemStart]
			afterDivItem := content[divItemEnd+1 : scriptEnd+9] // +9 to include </script>

			// Create responsive div
			chartId := strings.Split(strings.Split(content[divItemStart:divItemEnd], "id=\"")[1], "\"")[0]
			responsiveDiv := "<div class=\"item\" id=\"" + chartId + "\" style=\"width:100%;height:500px;\">"

			chartContent = beforeDivItem + responsiveDiv + afterDivItem
		} else {
			// Fallback to original extraction if we can't find the item div
			chartContent = content[divStart : scriptEnd+9]
		}
	}

//line pkg/templates/chart.qtpl:137
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:138
	qw422016.N().S(chartContent)
//line pkg/templates/chart.qtpl:138
	qw422016.N().S(`
`)
//line pkg/templates/chart.qtpl:139
}

//line pkg/templates/chart.qtpl:139
func writerenderChart(qq422016 qtio422016.Writer, chart *charts.Bar) {
//line pkg/templates/chart.qtpl:139
	qw422016 := qt422016.AcquireWriter(qq422016)
//line pkg/templates/chart.qtpl:139
	streamrenderChart(qw422016, chart)
//line pkg/templates/chart.qtpl:139
	qt422016.ReleaseWriter(qw422016)
//line pkg/templates/chart.qtpl:139
}

//line pkg/templates/chart.qtpl:139
func renderChart(chart *charts.Bar) string {
//line pkg/templates/chart.qtpl:139
	qb422016 := qt422016.AcquireByteBuffer()
//line pkg/templates/chart.qtpl:139
	writerenderChart(qb422016, chart)
//line pkg/templates/chart.qtpl:139
	qs422016 := string(qb422016.B)
//line pkg/templates/chart.qtpl:139
	qt422016.ReleaseByteBuffer(qb422016)
//line pkg/templates/chart.qtpl:139
	return qs422016
//line pkg/templates/chart.qtpl:139
}
