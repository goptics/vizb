// Code generated by qtc from "chart.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line pkg/templates/chart.qtpl:1
package templates

//line pkg/templates/chart.qtpl:3
import (
	"bytes"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/goptics/vizb/shared"
	"strings"
)

//line pkg/templates/chart.qtpl:10
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line pkg/templates/chart.qtpl:10
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line pkg/templates/chart.qtpl:10
func StreamBenchmarkChart(qw422016 *qt422016.Writer, BenchCharts []shared.BenchCharts) {
//line pkg/templates/chart.qtpl:10
	qw422016.N().S(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>`)
//line pkg/templates/chart.qtpl:15
	qw422016.E().S(shared.FlagState.Name)
//line pkg/templates/chart.qtpl:15
	qw422016.N().S(`</title>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js"></script>
    <script src="https://go-echarts.github.io/go-echarts-assets/assets/themes/light.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            width: 100%;
            font-family: Arial, sans-serif;
            scroll-padding-top: 20px;
        }

        .chart {
            margin: 20px auto;
            width: 98%;
            height: 500px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            max-width: 1080px;
            scroll-margin-top: 20px;
        }

        .chart ~ .chart {
            margin-top: 50px;
        }

        .container {
            margin: 0 auto;
            width: 100%;
        }
        
        h1 {
            text-align: center;
            font-family: Arial, sans-serif;
            margin: 20px 0;
        }
        
        /* Sidebar styles */
        .sidebar {
            position: fixed;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            background-color: rgba(255, 255, 255, 0.9);
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            max-height: 80vh;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 5px;
            cursor: move;
            user-select: none;
        }
        
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            cursor: move;
        }
        
        .sidebar-title {
            font-weight: bold;
            text-align: center;
            font-size: 14px;
            flex-grow: 1;
        }
        
        .minimize-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            padding: 0 5px;
            color: #666;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .minimize-btn:hover {
            color: #333;
        }
        
        .sidebar.minimized {
            width: auto;
            padding: 5px;
        }
        
        .sidebar.minimized .bench-indicator,
        .sidebar.minimized .sidebar-title {
            display: none;
        }
        
        .sidebar.minimized .minimize-btn {
            transform: rotate(180deg);
            font-size: 14px;
            padding: 3px;
            margin: 0;
        }
        
        .sidebar.minimized .sidebar-header {
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bench-indicator {
            padding: 5px 10px;
            border-radius: 4px;
            background-color: #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s;
            font-size: 12px;
            text-align: center;
        }
        
        .bench-indicator:hover {
            background-color: #e0e0e0;
        }
        
        .bench-indicator.active {
            background-color: #4CAF50;
            color: white;
        }
    </style>
    <script type="text/javascript">
        // Add resize event handler to make charts responsive
        window.addEventListener('resize', function() {
            // Resize all charts when window size changes
            const charts = document.querySelectorAll('.item');
            charts.forEach(function(chart) {
                const instance = echarts.getInstanceByDom(chart);
                if (instance) {
                    instance.resize();
                }
            });
        });
        
        // Initialize sidebar functionality when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.getElementById('bench-sidebar');
            const indicators = document.querySelectorAll('.bench-indicator');
            const chartSections = document.querySelectorAll('.chart-section');
            const minimizeBtn = document.getElementById('minimize-btn');
            
            // Make sidebar draggable
            let isDragging = false;
            let offsetX, offsetY;
            
            function startDrag(e) {
                // Only start drag if it's the sidebar header or the sidebar itself when minimized
                if (e.target.closest('.sidebar-header') || 
                    (sidebar.classList.contains('minimized') && e.target.closest('.sidebar'))) {
                    isDragging = true;
                    
                    // Get the current position of the sidebar
                    const sidebarRect = sidebar.getBoundingClientRect();
                    
                    // Calculate the offset from the mouse position to the sidebar position
                    offsetX = e.clientX - sidebarRect.left;
                    offsetY = e.clientY - sidebarRect.top;
                    
                    // Prevent text selection during drag
                    e.preventDefault();
                }
            }
            
            function drag(e) {
                if (isDragging) {
                    // Calculate new position
                    const x = e.clientX - offsetX;
                    const y = e.clientY - offsetY;
                    
                    // Apply new position
                    sidebar.style.left = x + 'px';
                    sidebar.style.top = y + 'px';
                    sidebar.style.right = 'auto';
                    sidebar.style.transform = 'none';
                }
            }
            
            function stopDrag() {
                isDragging = false;
            }
            
            // Add event listeners for dragging
            sidebar.addEventListener('mousedown', startDrag);
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDrag);
            
            // Minimize/maximize sidebar
            minimizeBtn.addEventListener('click', function() {
                sidebar.classList.toggle('minimized');
                this.textContent = sidebar.classList.contains('minimized') ? '◀' : '▶';
            });
            
            // Add click event to each indicator
            indicators.forEach(function(indicator) {
                indicator.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);
                    
                    if (targetElement) {
                        // Scroll to the target element
                        targetElement.scrollIntoView({ behavior: 'smooth' });
                        
                        // Update active state
                        indicators.forEach(ind => ind.classList.remove('active'));
                        this.classList.add('active');
                    }
                });
            });
            
            // Update active indicator on scroll
            window.addEventListener('scroll', function() {
                let currentSection = '';
                
                chartSections.forEach(function(section) {
                    const sectionTop = section.offsetTop;
                    const sectionHeight = section.clientHeight;
                    
                    if (pageYOffset >= (sectionTop - 100)) {
                        currentSection = section.getAttribute('id');
                    }
                });
                
                indicators.forEach(function(indicator) {
                    indicator.classList.remove('active');
                    if (indicator.getAttribute('data-target') === currentSection) {
                        indicator.classList.add('active');
                    }
                });
            });
        });
    </script>
</head>
<body>
    <h1>`)
//line pkg/templates/chart.qtpl:266
	qw422016.E().S(shared.FlagState.Name)
//line pkg/templates/chart.qtpl:266
	qw422016.N().S(` (CPU: `)
//line pkg/templates/chart.qtpl:266
	qw422016.N().D(shared.CPUCount)
//line pkg/templates/chart.qtpl:266
	qw422016.N().S(`)</h1>
    `)
//line pkg/templates/chart.qtpl:267
	if shared.FlagState.Description != "" {
//line pkg/templates/chart.qtpl:267
		qw422016.N().S(`
    <p style="text-align: center; margin-bottom: 20px;">`)
//line pkg/templates/chart.qtpl:268
		qw422016.E().S(shared.FlagState.Description)
//line pkg/templates/chart.qtpl:268
		qw422016.N().S(`</p>
    `)
//line pkg/templates/chart.qtpl:269
	}
//line pkg/templates/chart.qtpl:269
	qw422016.N().S(`

    `)
//line pkg/templates/chart.qtpl:272
	// Check if any benchmark has a non-empty name
	hasNamedBenchmarks := false
	for _, taskChart := range BenchCharts {
		if taskChart.Name != "" {
			hasNamedBenchmarks = true
			break
		}
	}

//line pkg/templates/chart.qtpl:280
	qw422016.N().S(`
    
    `)
//line pkg/templates/chart.qtpl:282
	if hasNamedBenchmarks {
//line pkg/templates/chart.qtpl:282
		qw422016.N().S(`
    <!-- Sidebar for benchmark navigation -->
    <div id="bench-sidebar" class="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-title">Bench Indicators</div>
            <button id="minimize-btn" class="minimize-btn">▶</button>
        </div>
        `)
//line pkg/templates/chart.qtpl:289
		for i, taskChart := range BenchCharts {
//line pkg/templates/chart.qtpl:289
			qw422016.N().S(`
        `)
//line pkg/templates/chart.qtpl:290
			if taskChart.Name != "" {
//line pkg/templates/chart.qtpl:290
				qw422016.N().S(`
        <div class="bench-indicator`)
//line pkg/templates/chart.qtpl:291
				if i == 0 {
//line pkg/templates/chart.qtpl:291
					qw422016.N().S(` active`)
//line pkg/templates/chart.qtpl:291
				}
//line pkg/templates/chart.qtpl:291
				qw422016.N().S(`" data-target="bench-section-`)
//line pkg/templates/chart.qtpl:291
				qw422016.N().D(i)
//line pkg/templates/chart.qtpl:291
				qw422016.N().S(`">
            `)
//line pkg/templates/chart.qtpl:292
				qw422016.E().S(taskChart.Name)
//line pkg/templates/chart.qtpl:292
				qw422016.N().S(`
        </div>
        `)
//line pkg/templates/chart.qtpl:294
			}
//line pkg/templates/chart.qtpl:294
			qw422016.N().S(`
        `)
//line pkg/templates/chart.qtpl:295
		}
//line pkg/templates/chart.qtpl:295
		qw422016.N().S(`
    </div>
    `)
//line pkg/templates/chart.qtpl:297
	}
//line pkg/templates/chart.qtpl:297
	qw422016.N().S(`
    
    `)
//line pkg/templates/chart.qtpl:299
	for i, taskChart := range BenchCharts {
//line pkg/templates/chart.qtpl:299
		qw422016.N().S(`
    <div id="bench-section-`)
//line pkg/templates/chart.qtpl:300
		qw422016.N().D(i)
//line pkg/templates/chart.qtpl:300
		qw422016.N().S(`" class="chart-section">
        <div class='chart'>
            `)
//line pkg/templates/chart.qtpl:302
		qw422016.N().S(renderChart(taskChart.NsPerOpChart))
//line pkg/templates/chart.qtpl:302
		qw422016.N().S(`
        </div>
        `)
//line pkg/templates/chart.qtpl:304
		if shared.HasMemStats {
//line pkg/templates/chart.qtpl:304
			qw422016.N().S(`
        <div class='chart'>
            `)
//line pkg/templates/chart.qtpl:306
			qw422016.N().S(renderChart(taskChart.BytesPerOpChart))
//line pkg/templates/chart.qtpl:306
			qw422016.N().S(`
        </div>
        `)
//line pkg/templates/chart.qtpl:308
		}
//line pkg/templates/chart.qtpl:308
		qw422016.N().S(`
        `)
//line pkg/templates/chart.qtpl:309
		if shared.HasMemStats {
//line pkg/templates/chart.qtpl:309
			qw422016.N().S(`
        <div class='chart'>
            `)
//line pkg/templates/chart.qtpl:311
			qw422016.N().S(renderChart(taskChart.AllocsPerOpChart))
//line pkg/templates/chart.qtpl:311
			qw422016.N().S(`
        </div>
        `)
//line pkg/templates/chart.qtpl:313
		}
//line pkg/templates/chart.qtpl:313
		qw422016.N().S(`
    </div>
    `)
//line pkg/templates/chart.qtpl:315
	}
//line pkg/templates/chart.qtpl:315
	qw422016.N().S(`

    `)
//line pkg/templates/chart.qtpl:317
	if !shared.HasMemStats {
//line pkg/templates/chart.qtpl:317
		qw422016.N().S(`
    <div style="text-align: center; margin: 20px; color: #666;">
        <p>Note: Memory statistics are not available. Run benchmarks with <code>-benchmem</code> flag to include memory metrics.</p>
    </div>
    `)
//line pkg/templates/chart.qtpl:321
	}
//line pkg/templates/chart.qtpl:321
	qw422016.N().S(`
    <footer style="text-align: center; margin-top: 30px; margin-bottom: 20px; font-size: 14px; color: #666;">
        Generated by <a alt="Vizb" target="_blank" href="https://github.com/goptics/vizb" style="color: #666; text-decoration: none; font-weight: bold;">Vizb</a> | Made with <span style="color: #e25555;">❤</span> by <a alt="Goptics" target="_blank" href="https://github.com/goptics" style="color: #666; text-decoration: none; font-weight: bold;">Goptics</a> &copy; 2025
    </footer>
</body>
</html>
`)
//line pkg/templates/chart.qtpl:327
}

//line pkg/templates/chart.qtpl:327
func WriteBenchmarkChart(qq422016 qtio422016.Writer, BenchCharts []shared.BenchCharts) {
//line pkg/templates/chart.qtpl:327
	qw422016 := qt422016.AcquireWriter(qq422016)
//line pkg/templates/chart.qtpl:327
	StreamBenchmarkChart(qw422016, BenchCharts)
//line pkg/templates/chart.qtpl:327
	qt422016.ReleaseWriter(qw422016)
//line pkg/templates/chart.qtpl:327
}

//line pkg/templates/chart.qtpl:327
func BenchmarkChart(BenchCharts []shared.BenchCharts) string {
//line pkg/templates/chart.qtpl:327
	qb422016 := qt422016.AcquireByteBuffer()
//line pkg/templates/chart.qtpl:327
	WriteBenchmarkChart(qb422016, BenchCharts)
//line pkg/templates/chart.qtpl:327
	qs422016 := string(qb422016.B)
//line pkg/templates/chart.qtpl:327
	qt422016.ReleaseByteBuffer(qb422016)
//line pkg/templates/chart.qtpl:327
	return qs422016
//line pkg/templates/chart.qtpl:327
}

//line pkg/templates/chart.qtpl:329
func streamrenderChart(qw422016 *qt422016.Writer, chart *charts.Bar) {
//line pkg/templates/chart.qtpl:329
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:331
	var buf bytes.Buffer
	chart.Render(&buf)
	content := buf.String()

	// Extract just the chart div and script content
	divStart := strings.Index(content, "<div class=\"container\">")
	scriptEnd := strings.LastIndex(content, "</script>")

	var chartContent string
	if divStart >= 0 && scriptEnd >= 0 {
		// Find the div item with fixed width and height
		divItemStart := strings.Index(content, "<div class=\"item\"")
		divItemEnd := strings.Index(content[divItemStart:], ">") + divItemStart

		if divItemStart >= 0 && divItemEnd > divItemStart {
			// Replace the fixed width and height with responsive values
			beforeDivItem := content[divStart:divItemStart]
			afterDivItem := content[divItemEnd+1 : scriptEnd+9] // +9 to include </script>

			// Create responsive div
			chartId := strings.Split(strings.Split(content[divItemStart:divItemEnd], "id=\"")[1], "\"")[0]
			responsiveDiv := "<div class=\"item\" id=\"" + chartId + "\" style=\"width:100%;height:500px;\">"

			chartContent = beforeDivItem + responsiveDiv + afterDivItem
		} else {
			// Fallback to original extraction if we can't find the item div
			chartContent = content[divStart : scriptEnd+9]
		}
	}

//line pkg/templates/chart.qtpl:360
	qw422016.N().S(`
    `)
//line pkg/templates/chart.qtpl:361
	qw422016.N().S(chartContent)
//line pkg/templates/chart.qtpl:361
	qw422016.N().S(`
`)
//line pkg/templates/chart.qtpl:362
}

//line pkg/templates/chart.qtpl:362
func writerenderChart(qq422016 qtio422016.Writer, chart *charts.Bar) {
//line pkg/templates/chart.qtpl:362
	qw422016 := qt422016.AcquireWriter(qq422016)
//line pkg/templates/chart.qtpl:362
	streamrenderChart(qw422016, chart)
//line pkg/templates/chart.qtpl:362
	qt422016.ReleaseWriter(qw422016)
//line pkg/templates/chart.qtpl:362
}

//line pkg/templates/chart.qtpl:362
func renderChart(chart *charts.Bar) string {
//line pkg/templates/chart.qtpl:362
	qb422016 := qt422016.AcquireByteBuffer()
//line pkg/templates/chart.qtpl:362
	writerenderChart(qb422016, chart)
//line pkg/templates/chart.qtpl:362
	qs422016 := string(qb422016.B)
//line pkg/templates/chart.qtpl:362
	qt422016.ReleaseByteBuffer(qb422016)
//line pkg/templates/chart.qtpl:362
	return qs422016
//line pkg/templates/chart.qtpl:362
}
